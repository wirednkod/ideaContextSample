{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, isFunction, isString, isU8a } from '@polkadot/util';\nimport { Bytes } from \"./Bytes.js\";\nconst HASHER_MAP = {\n  // opaque\n  Blake2_128: [16, false],\n  // eslint-disable-line camelcase\n  Blake2_128Concat: [16, true],\n  // eslint-disable-line camelcase\n  Blake2_256: [32, false],\n  // eslint-disable-line camelcase\n  Identity: [0, true],\n  Twox128: [16, false],\n  Twox256: [32, false],\n  Twox64Concat: [8, true]\n};\n/** @internal */\n\nexport function unwrapStorageType(type, isOptional) {\n  const outputType = type.isPlain ? type.asPlain.toString() : type.isMap ? type.asMap.value.toString() : type.isDoubleMap ? type.asDoubleMap.value.toString() : type.asNMap.value.toString();\n  return isOptional ? `Option<${outputType}>` : outputType;\n}\n/** @internal */\n\nfunction decodeStorageKey(value) {\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  if (value instanceof StorageKey) {\n    return {\n      key: value,\n      method: value.method,\n      section: value.section\n    };\n  } else if (!value || isString(value) || isU8a(value)) {\n    // let Bytes handle these inputs\n    return {\n      key: value\n    };\n  } else if (isFunction(value)) {\n    return {\n      key: value(),\n      method: value.method,\n      section: value.section\n    };\n  } else if (Array.isArray(value)) {\n    const [fn, arg] = value;\n    assert(isFunction(fn), 'Expected function input for key construction');\n    return {\n      key: fn(arg),\n      method: fn.method,\n      section: fn.section\n    };\n  }\n\n  throw new Error(`Unable to convert input ${value} to StorageKey`);\n}\n/** @internal */\n\n\nfunction decodeHashers(registry, value, hashers) {\n  // the storage entry is xxhashAsU8a(prefix, 128) + xxhashAsU8a(method, 128), 256 bits total\n  let offset = 32;\n  return hashers.reduce((result, [hasher, type]) => {\n    const [hashLen, canDecode] = HASHER_MAP[hasher.type];\n    const decoded = canDecode ? registry.createType(type, value.subarray(offset + hashLen)) : registry.createType('Raw', value.subarray(offset, offset + hashLen));\n    offset += hashLen + (canDecode ? decoded.encodedLength : 0);\n    result.push(decoded);\n    return result;\n  }, []);\n}\n/** @internal */\n\n\nfunction decodeArgsFromMeta(registry, value, meta) {\n  if (!meta || !(meta.type.isMap || meta.type.isDoubleMap || meta.type.isNMap)) {\n    return [];\n  }\n\n  if (meta.type.isMap) {\n    const mapInfo = meta.type.asMap;\n    return decodeHashers(registry, value, [[mapInfo.hasher, mapInfo.key.toString()]]);\n  } else if (meta.type.isDoubleMap) {\n    const mapInfo = meta.type.asDoubleMap;\n    return decodeHashers(registry, value, [[mapInfo.hasher, mapInfo.key1.toString()], [mapInfo.key2Hasher, mapInfo.key2.toString()]]);\n  }\n\n  const mapInfo = meta.type.asNMap;\n  return decodeHashers(registry, value, mapInfo.hashers.map((h, i) => [h, mapInfo.keyVec[i].toString()]));\n}\n/** @internal */\n\n\nfunction getMeta(value) {\n  if (value instanceof StorageKey) {\n    return value.meta;\n  } else if (isFunction(value)) {\n    return value.meta;\n  } else if (Array.isArray(value)) {\n    const [fn] = value;\n    return fn.meta;\n  }\n\n  return undefined;\n}\n/** @internal */\n\n\nfunction getType(value) {\n  if (value instanceof StorageKey) {\n    return value.outputType;\n  } else if (isFunction(value)) {\n    return unwrapStorageType(value.meta.type);\n  } else if (Array.isArray(value)) {\n    const [fn] = value;\n\n    if (fn.meta) {\n      return unwrapStorageType(fn.meta.type);\n    }\n  } // If we have no type set, default to Raw\n\n\n  return 'Raw';\n}\n/**\n * @name StorageKey\n * @description\n * A representation of a storage key (typically hashed) in the system. It can be\n * constructed by passing in a raw key or a StorageEntry with (optional) arguments.\n */\n\n\nexport class StorageKey extends Bytes {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore This is assigned via this.decodeArgsFromMeta()\n  constructor(registry, value, override = {}) {\n    const {\n      key,\n      method,\n      section\n    } = decodeStorageKey(value);\n    super(registry, key);\n    this._args = void 0;\n    this._meta = void 0;\n    this._outputType = void 0;\n    this._method = void 0;\n    this._section = void 0;\n    this._outputType = getType(value); // decode the args (as applicable based on the key and the hashers, after all init)\n\n    this.setMeta(getMeta(value), override.section || section, override.method || method);\n  }\n  /**\n   * @description Return the decoded arguments (applicable to map/doublemap with decodable values)\n   */\n\n\n  get args() {\n    return this._args;\n  }\n  /**\n   * @description The metadata or `undefined` when not available\n   */\n\n\n  get meta() {\n    return this._meta;\n  }\n  /**\n   * @description The key method or `undefined` when not specified\n   */\n\n\n  get method() {\n    return this._method;\n  }\n  /**\n   * @description The output type\n   */\n\n\n  get outputType() {\n    return this._outputType;\n  }\n  /**\n   * @description The key section or `undefined` when not specified\n   */\n\n\n  get section() {\n    return this._section;\n  }\n\n  is(key) {\n    return key.section === this.section && key.method === this.method;\n  }\n  /**\n   * @description Sets the meta for this key\n   */\n\n\n  setMeta(meta, section, method) {\n    this._meta = meta;\n    this._method = method || this._method;\n    this._section = section || this._section;\n\n    if (meta) {\n      this._outputType = unwrapStorageType(meta.type);\n    }\n\n    try {\n      this._args = decodeArgsFromMeta(this.registry, this.toU8a(true), this.meta);\n    } catch (error) {// ignore...\n    }\n\n    return this;\n  }\n  /**\n   * @description Returns the Human representation for this type\n   */\n\n\n  toHuman() {\n    return this._args.length ? this._args.map(arg => arg.toHuman()) : super.toHuman();\n  }\n  /**\n   * @description Returns the raw type for this\n   */\n\n\n  toRawType() {\n    return 'StorageKey';\n  }\n\n}","map":{"version":3,"sources":["/home/wirednkod/Documents/repos/mine/sampleContext/node_modules/@polkadot/types/primitive/StorageKey.js"],"names":["assert","isFunction","isString","isU8a","Bytes","HASHER_MAP","Blake2_128","Blake2_128Concat","Blake2_256","Identity","Twox128","Twox256","Twox64Concat","unwrapStorageType","type","isOptional","outputType","isPlain","asPlain","toString","isMap","asMap","value","isDoubleMap","asDoubleMap","asNMap","decodeStorageKey","StorageKey","key","method","section","Array","isArray","fn","arg","Error","decodeHashers","registry","hashers","offset","reduce","result","hasher","hashLen","canDecode","decoded","createType","subarray","encodedLength","push","decodeArgsFromMeta","meta","isNMap","mapInfo","key1","key2Hasher","key2","map","h","i","keyVec","getMeta","undefined","getType","constructor","override","_args","_meta","_outputType","_method","_section","setMeta","args","is","toU8a","error","toHuman","length","toRawType"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, isFunction, isString, isU8a } from '@polkadot/util';\nimport { Bytes } from \"./Bytes.js\";\nconst HASHER_MAP = {\n  // opaque\n  Blake2_128: [16, false],\n  // eslint-disable-line camelcase\n  Blake2_128Concat: [16, true],\n  // eslint-disable-line camelcase\n  Blake2_256: [32, false],\n  // eslint-disable-line camelcase\n  Identity: [0, true],\n  Twox128: [16, false],\n  Twox256: [32, false],\n  Twox64Concat: [8, true]\n};\n/** @internal */\n\nexport function unwrapStorageType(type, isOptional) {\n  const outputType = type.isPlain ? type.asPlain.toString() : type.isMap ? type.asMap.value.toString() : type.isDoubleMap ? type.asDoubleMap.value.toString() : type.asNMap.value.toString();\n  return isOptional ? `Option<${outputType}>` : outputType;\n}\n/** @internal */\n\nfunction decodeStorageKey(value) {\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  if (value instanceof StorageKey) {\n    return {\n      key: value,\n      method: value.method,\n      section: value.section\n    };\n  } else if (!value || isString(value) || isU8a(value)) {\n    // let Bytes handle these inputs\n    return {\n      key: value\n    };\n  } else if (isFunction(value)) {\n    return {\n      key: value(),\n      method: value.method,\n      section: value.section\n    };\n  } else if (Array.isArray(value)) {\n    const [fn, arg] = value;\n    assert(isFunction(fn), 'Expected function input for key construction');\n    return {\n      key: fn(arg),\n      method: fn.method,\n      section: fn.section\n    };\n  }\n\n  throw new Error(`Unable to convert input ${value} to StorageKey`);\n}\n/** @internal */\n\n\nfunction decodeHashers(registry, value, hashers) {\n  // the storage entry is xxhashAsU8a(prefix, 128) + xxhashAsU8a(method, 128), 256 bits total\n  let offset = 32;\n  return hashers.reduce((result, [hasher, type]) => {\n    const [hashLen, canDecode] = HASHER_MAP[hasher.type];\n    const decoded = canDecode ? registry.createType(type, value.subarray(offset + hashLen)) : registry.createType('Raw', value.subarray(offset, offset + hashLen));\n    offset += hashLen + (canDecode ? decoded.encodedLength : 0);\n    result.push(decoded);\n    return result;\n  }, []);\n}\n/** @internal */\n\n\nfunction decodeArgsFromMeta(registry, value, meta) {\n  if (!meta || !(meta.type.isMap || meta.type.isDoubleMap || meta.type.isNMap)) {\n    return [];\n  }\n\n  if (meta.type.isMap) {\n    const mapInfo = meta.type.asMap;\n    return decodeHashers(registry, value, [[mapInfo.hasher, mapInfo.key.toString()]]);\n  } else if (meta.type.isDoubleMap) {\n    const mapInfo = meta.type.asDoubleMap;\n    return decodeHashers(registry, value, [[mapInfo.hasher, mapInfo.key1.toString()], [mapInfo.key2Hasher, mapInfo.key2.toString()]]);\n  }\n\n  const mapInfo = meta.type.asNMap;\n  return decodeHashers(registry, value, mapInfo.hashers.map((h, i) => [h, mapInfo.keyVec[i].toString()]));\n}\n/** @internal */\n\n\nfunction getMeta(value) {\n  if (value instanceof StorageKey) {\n    return value.meta;\n  } else if (isFunction(value)) {\n    return value.meta;\n  } else if (Array.isArray(value)) {\n    const [fn] = value;\n    return fn.meta;\n  }\n\n  return undefined;\n}\n/** @internal */\n\n\nfunction getType(value) {\n  if (value instanceof StorageKey) {\n    return value.outputType;\n  } else if (isFunction(value)) {\n    return unwrapStorageType(value.meta.type);\n  } else if (Array.isArray(value)) {\n    const [fn] = value;\n\n    if (fn.meta) {\n      return unwrapStorageType(fn.meta.type);\n    }\n  } // If we have no type set, default to Raw\n\n\n  return 'Raw';\n}\n/**\n * @name StorageKey\n * @description\n * A representation of a storage key (typically hashed) in the system. It can be\n * constructed by passing in a raw key or a StorageEntry with (optional) arguments.\n */\n\n\nexport class StorageKey extends Bytes {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore This is assigned via this.decodeArgsFromMeta()\n  constructor(registry, value, override = {}) {\n    const {\n      key,\n      method,\n      section\n    } = decodeStorageKey(value);\n    super(registry, key);\n    this._args = void 0;\n    this._meta = void 0;\n    this._outputType = void 0;\n    this._method = void 0;\n    this._section = void 0;\n    this._outputType = getType(value); // decode the args (as applicable based on the key and the hashers, after all init)\n\n    this.setMeta(getMeta(value), override.section || section, override.method || method);\n  }\n  /**\n   * @description Return the decoded arguments (applicable to map/doublemap with decodable values)\n   */\n\n\n  get args() {\n    return this._args;\n  }\n  /**\n   * @description The metadata or `undefined` when not available\n   */\n\n\n  get meta() {\n    return this._meta;\n  }\n  /**\n   * @description The key method or `undefined` when not specified\n   */\n\n\n  get method() {\n    return this._method;\n  }\n  /**\n   * @description The output type\n   */\n\n\n  get outputType() {\n    return this._outputType;\n  }\n  /**\n   * @description The key section or `undefined` when not specified\n   */\n\n\n  get section() {\n    return this._section;\n  }\n\n  is(key) {\n    return key.section === this.section && key.method === this.method;\n  }\n  /**\n   * @description Sets the meta for this key\n   */\n\n\n  setMeta(meta, section, method) {\n    this._meta = meta;\n    this._method = method || this._method;\n    this._section = section || this._section;\n\n    if (meta) {\n      this._outputType = unwrapStorageType(meta.type);\n    }\n\n    try {\n      this._args = decodeArgsFromMeta(this.registry, this.toU8a(true), this.meta);\n    } catch (error) {// ignore...\n    }\n\n    return this;\n  }\n  /**\n   * @description Returns the Human representation for this type\n   */\n\n\n  toHuman() {\n    return this._args.length ? this._args.map(arg => arg.toHuman()) : super.toHuman();\n  }\n  /**\n   * @description Returns the raw type for this\n   */\n\n\n  toRawType() {\n    return 'StorageKey';\n  }\n\n}"]},"metadata":{},"sourceType":"module"}