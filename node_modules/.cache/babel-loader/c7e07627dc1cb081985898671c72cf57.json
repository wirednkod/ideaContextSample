{"ast":null,"code":"// Copyright 2017-2019 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, isUndefined } from '@polkadot/util';\n\nfunction sig({\n  method,\n  section\n}, args) {\n  return `${section}.${method}(${args.join(', ')})`;\n}\n\nfunction doDoubleMap(creator, args) {\n  const {\n    key1,\n    key2\n  } = creator.meta.type.asDoubleMap;\n  assert(args.length === 2, () => `${sig(creator, [key1, key2])} is a double map, requiring 2 arguments, ${args.length} found`); // pass as tuple\n\n  return [creator, args];\n}\n\nfunction doMap(creator, args) {\n  const {\n    key\n  } = creator.meta.type.asMap;\n  assert(args.length === 1, () => `${sig(creator, [key])} is a map, requiring 1 argument, ${args.length} found`); // expand\n\n  return args.length ? [creator, args[0]] : [creator];\n}\n\nfunction doNMap(creator, args) {\n  const {\n    keyVec\n  } = creator.meta.type.asNMap;\n  assert(args.length === keyVec.length, () => `${sig(creator, keyVec)} is a multi map, requiring ${keyVec.length} arguments, ${args.length} found`); // pass as tuple\n\n  return [creator, args];\n} // sets up the arguments in the form of [creator, args] ready to be used in a storage\n// call. Additionally, it verifies that the correct number of arguments have been passed\n\n\nexport function extractStorageArgs(creator, _args) {\n  const args = _args.filter(arg => !isUndefined(arg));\n\n  if (creator.meta.type.isDoubleMap) {\n    return doDoubleMap(creator, args);\n  } else if (creator.meta.type.isMap) {\n    return doMap(creator, args);\n  } else if (creator.meta.type.isNMap) {\n    return doNMap(creator, args);\n  }\n\n  assert(args.length === 0, () => `${sig(creator, [])} does not take any arguments, ${args.length} found`); // no args\n\n  return [creator];\n}","map":{"version":3,"sources":["/home/wirednkod/Documents/repos/mine/sampleContext/node_modules/@polkadot/api/util/validate.js"],"names":["assert","isUndefined","sig","method","section","args","join","doDoubleMap","creator","key1","key2","meta","type","asDoubleMap","length","doMap","key","asMap","doNMap","keyVec","asNMap","extractStorageArgs","_args","filter","arg","isDoubleMap","isMap","isNMap"],"mappings":"AAAA;AACA;AACA,SAASA,MAAT,EAAiBC,WAAjB,QAAoC,gBAApC;;AAEA,SAASC,GAAT,CAAa;AACXC,EAAAA,MADW;AAEXC,EAAAA;AAFW,CAAb,EAGGC,IAHH,EAGS;AACP,SAAQ,GAAED,OAAQ,IAAGD,MAAO,IAAGE,IAAI,CAACC,IAAL,CAAU,IAAV,CAAgB,GAA/C;AACD;;AAED,SAASC,WAAT,CAAqBC,OAArB,EAA8BH,IAA9B,EAAoC;AAClC,QAAM;AACJI,IAAAA,IADI;AAEJC,IAAAA;AAFI,MAGFF,OAAO,CAACG,IAAR,CAAaC,IAAb,CAAkBC,WAHtB;AAIAb,EAAAA,MAAM,CAACK,IAAI,CAACS,MAAL,KAAgB,CAAjB,EAAoB,MAAO,GAAEZ,GAAG,CAACM,OAAD,EAAU,CAACC,IAAD,EAAOC,IAAP,CAAV,CAAwB,4CAA2CL,IAAI,CAACS,MAAO,QAA/G,CAAN,CALkC,CAK6F;;AAE/H,SAAO,CAACN,OAAD,EAAUH,IAAV,CAAP;AACD;;AAED,SAASU,KAAT,CAAeP,OAAf,EAAwBH,IAAxB,EAA8B;AAC5B,QAAM;AACJW,IAAAA;AADI,MAEFR,OAAO,CAACG,IAAR,CAAaC,IAAb,CAAkBK,KAFtB;AAGAjB,EAAAA,MAAM,CAACK,IAAI,CAACS,MAAL,KAAgB,CAAjB,EAAoB,MAAO,GAAEZ,GAAG,CAACM,OAAD,EAAU,CAACQ,GAAD,CAAV,CAAiB,oCAAmCX,IAAI,CAACS,MAAO,QAAhG,CAAN,CAJ4B,CAIoF;;AAEhH,SAAOT,IAAI,CAACS,MAAL,GAAc,CAACN,OAAD,EAAUH,IAAI,CAAC,CAAD,CAAd,CAAd,GAAmC,CAACG,OAAD,CAA1C;AACD;;AAED,SAASU,MAAT,CAAgBV,OAAhB,EAAyBH,IAAzB,EAA+B;AAC7B,QAAM;AACJc,IAAAA;AADI,MAEFX,OAAO,CAACG,IAAR,CAAaC,IAAb,CAAkBQ,MAFtB;AAGApB,EAAAA,MAAM,CAACK,IAAI,CAACS,MAAL,KAAgBK,MAAM,CAACL,MAAxB,EAAgC,MAAO,GAAEZ,GAAG,CAACM,OAAD,EAAUW,MAAV,CAAkB,8BAA6BA,MAAM,CAACL,MAAO,eAAcT,IAAI,CAACS,MAAO,QAAnI,CAAN,CAJ6B,CAIsH;;AAEnJ,SAAO,CAACN,OAAD,EAAUH,IAAV,CAAP;AACD,C,CAAC;AACF;;;AAGA,OAAO,SAASgB,kBAAT,CAA4Bb,OAA5B,EAAqCc,KAArC,EAA4C;AACjD,QAAMjB,IAAI,GAAGiB,KAAK,CAACC,MAAN,CAAaC,GAAG,IAAI,CAACvB,WAAW,CAACuB,GAAD,CAAhC,CAAb;;AAEA,MAAIhB,OAAO,CAACG,IAAR,CAAaC,IAAb,CAAkBa,WAAtB,EAAmC;AACjC,WAAOlB,WAAW,CAACC,OAAD,EAAUH,IAAV,CAAlB;AACD,GAFD,MAEO,IAAIG,OAAO,CAACG,IAAR,CAAaC,IAAb,CAAkBc,KAAtB,EAA6B;AAClC,WAAOX,KAAK,CAACP,OAAD,EAAUH,IAAV,CAAZ;AACD,GAFM,MAEA,IAAIG,OAAO,CAACG,IAAR,CAAaC,IAAb,CAAkBe,MAAtB,EAA8B;AACnC,WAAOT,MAAM,CAACV,OAAD,EAAUH,IAAV,CAAb;AACD;;AAEDL,EAAAA,MAAM,CAACK,IAAI,CAACS,MAAL,KAAgB,CAAjB,EAAoB,MAAO,GAAEZ,GAAG,CAACM,OAAD,EAAU,EAAV,CAAc,iCAAgCH,IAAI,CAACS,MAAO,QAA1F,CAAN,CAXiD,CAWyD;;AAE1G,SAAO,CAACN,OAAD,CAAP;AACD","sourcesContent":["// Copyright 2017-2019 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, isUndefined } from '@polkadot/util';\n\nfunction sig({\n  method,\n  section\n}, args) {\n  return `${section}.${method}(${args.join(', ')})`;\n}\n\nfunction doDoubleMap(creator, args) {\n  const {\n    key1,\n    key2\n  } = creator.meta.type.asDoubleMap;\n  assert(args.length === 2, () => `${sig(creator, [key1, key2])} is a double map, requiring 2 arguments, ${args.length} found`); // pass as tuple\n\n  return [creator, args];\n}\n\nfunction doMap(creator, args) {\n  const {\n    key\n  } = creator.meta.type.asMap;\n  assert(args.length === 1, () => `${sig(creator, [key])} is a map, requiring 1 argument, ${args.length} found`); // expand\n\n  return args.length ? [creator, args[0]] : [creator];\n}\n\nfunction doNMap(creator, args) {\n  const {\n    keyVec\n  } = creator.meta.type.asNMap;\n  assert(args.length === keyVec.length, () => `${sig(creator, keyVec)} is a multi map, requiring ${keyVec.length} arguments, ${args.length} found`); // pass as tuple\n\n  return [creator, args];\n} // sets up the arguments in the form of [creator, args] ready to be used in a storage\n// call. Additionally, it verifies that the correct number of arguments have been passed\n\n\nexport function extractStorageArgs(creator, _args) {\n  const args = _args.filter(arg => !isUndefined(arg));\n\n  if (creator.meta.type.isDoubleMap) {\n    return doDoubleMap(creator, args);\n  } else if (creator.meta.type.isMap) {\n    return doMap(creator, args);\n  } else if (creator.meta.type.isNMap) {\n    return doNMap(creator, args);\n  }\n\n  assert(args.length === 0, () => `${sig(creator, [])} does not take any arguments, ${args.length} found`); // no args\n\n  return [creator];\n}"]},"metadata":{},"sourceType":"module"}