{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { combineLatest, of } from '@polkadot/x-rxjs';\nimport { catchError, map } from '@polkadot/x-rxjs/operators';\nimport { createHeaderExtended } from \"../type/index.js\";\nimport { memo } from \"../util/index.js\";\n/**\n * @name getHeader\n * @param {( Uint8Array | string )} hash - A block hash as U8 array or string.\n * @returns An array containing the block header and the block author\n * @description Get a specific block header and extend it with the author\n * @example\n * <BR>\n *\n * ```javascript\n * const { author, number } = await api.derive.chain.getHeader('0x123...456');\n *\n * console.log(`block #${number} was authored by ${author}`);\n * ```\n */\n\nexport function getHeader(instanceId, api) {\n  return memo(instanceId, hash => combineLatest([api.rpc.chain.getHeader(hash), api.query.session ? api.query.session.validators.at(hash) : of([])]).pipe(map(([header, validators]) => createHeaderExtended(header.registry, header, validators)), catchError(() => // where rpc.chain.getHeader throws, we will land here - it can happen that\n  // we supplied an invalid hash. (Due to defaults, storeage will have an\n  // empty value, so only the RPC is affected). So return undefined\n  of())));\n}","map":{"version":3,"sources":["/home/wirednkod/Documents/repos/mine/sampleContext/node_modules/@polkadot/api-derive/chain/getHeader.js"],"names":["combineLatest","of","catchError","map","createHeaderExtended","memo","getHeader","instanceId","api","hash","rpc","chain","query","session","validators","at","pipe","header","registry"],"mappings":"AAAA;AACA;AACA,SAASA,aAAT,EAAwBC,EAAxB,QAAkC,kBAAlC;AACA,SAASC,UAAT,EAAqBC,GAArB,QAAgC,4BAAhC;AACA,SAASC,oBAAT,QAAqC,kBAArC;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,SAAT,CAAmBC,UAAnB,EAA+BC,GAA/B,EAAoC;AACzC,SAAOH,IAAI,CAACE,UAAD,EAAaE,IAAI,IAAIT,aAAa,CAAC,CAACQ,GAAG,CAACE,GAAJ,CAAQC,KAAR,CAAcL,SAAd,CAAwBG,IAAxB,CAAD,EAAgCD,GAAG,CAACI,KAAJ,CAAUC,OAAV,GAAoBL,GAAG,CAACI,KAAJ,CAAUC,OAAV,CAAkBC,UAAlB,CAA6BC,EAA7B,CAAgCN,IAAhC,CAApB,GAA4DR,EAAE,CAAC,EAAD,CAA9F,CAAD,CAAb,CAAmHe,IAAnH,CAAwHb,GAAG,CAAC,CAAC,CAACc,MAAD,EAASH,UAAT,CAAD,KAA0BV,oBAAoB,CAACa,MAAM,CAACC,QAAR,EAAkBD,MAAlB,EAA0BH,UAA1B,CAA/C,CAA3H,EAAkNZ,UAAU,CAAC,MAAM;AACnQ;AACA;AACAD,EAAAA,EAAE,EAH0P,CAA5N,CAArB,CAAX;AAID","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { combineLatest, of } from '@polkadot/x-rxjs';\nimport { catchError, map } from '@polkadot/x-rxjs/operators';\nimport { createHeaderExtended } from \"../type/index.js\";\nimport { memo } from \"../util/index.js\";\n/**\n * @name getHeader\n * @param {( Uint8Array | string )} hash - A block hash as U8 array or string.\n * @returns An array containing the block header and the block author\n * @description Get a specific block header and extend it with the author\n * @example\n * <BR>\n *\n * ```javascript\n * const { author, number } = await api.derive.chain.getHeader('0x123...456');\n *\n * console.log(`block #${number} was authored by ${author}`);\n * ```\n */\n\nexport function getHeader(instanceId, api) {\n  return memo(instanceId, hash => combineLatest([api.rpc.chain.getHeader(hash), api.query.session ? api.query.session.validators.at(hash) : of([])]).pipe(map(([header, validators]) => createHeaderExtended(header.registry, header, validators)), catchError(() => // where rpc.chain.getHeader throws, we will land here - it can happen that\n  // we supplied an invalid hash. (Due to defaults, storeage will have an\n  // empty value, so only the RPC is affected). So return undefined\n  of())));\n}"]},"metadata":{},"sourceType":"module"}