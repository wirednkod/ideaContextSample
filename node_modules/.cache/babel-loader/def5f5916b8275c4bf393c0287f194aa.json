{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { of } from '@polkadot/x-rxjs';\nimport { map, switchMap } from '@polkadot/x-rxjs/operators';\nimport { memo } from \"../util/index.js\";\nexport function _ownExposures(instanceId, api) {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  return memo(instanceId, (accountId, eras, _withActive) => eras.length ? api.queryMulti([...eras.map(era => [api.query.staking.erasStakersClipped, [era, accountId]]), ...eras.map(era => [api.query.staking.erasStakers, [era, accountId]])]).pipe(map(all => eras.map((era, index) => ({\n    clipped: all[index],\n    era,\n    exposure: all[eras.length + index]\n  })))) : of([]));\n}\nexport function ownExposure(instanceId, api) {\n  return memo(instanceId, (accountId, era) => api.derive.staking._ownExposures(accountId, [era], true).pipe(map(([first]) => first)));\n}\nexport function ownExposures(instanceId, api) {\n  return memo(instanceId, (accountId, withActive = false) => {\n    return api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._ownExposures(accountId, eras, withActive)));\n  });\n}","map":{"version":3,"sources":["/home/wirednkod/Documents/repos/mine/sampleContext/node_modules/@polkadot/api-derive/staking/ownExposure.js"],"names":["of","map","switchMap","memo","_ownExposures","instanceId","api","accountId","eras","_withActive","length","queryMulti","era","query","staking","erasStakersClipped","erasStakers","pipe","all","index","clipped","exposure","ownExposure","derive","first","ownExposures","withActive","erasHistoric"],"mappings":"AAAA;AACA;AACA,SAASA,EAAT,QAAmB,kBAAnB;AACA,SAASC,GAAT,EAAcC,SAAd,QAA+B,4BAA/B;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAO,SAASC,aAAT,CAAuBC,UAAvB,EAAmCC,GAAnC,EAAwC;AAC7C;AACA,SAAOH,IAAI,CAACE,UAAD,EAAa,CAACE,SAAD,EAAYC,IAAZ,EAAkBC,WAAlB,KAAkCD,IAAI,CAACE,MAAL,GAAcJ,GAAG,CAACK,UAAJ,CAAe,CAAC,GAAGH,IAAI,CAACP,GAAL,CAASW,GAAG,IAAI,CAACN,GAAG,CAACO,KAAJ,CAAUC,OAAV,CAAkBC,kBAAnB,EAAuC,CAACH,GAAD,EAAML,SAAN,CAAvC,CAAhB,CAAJ,EAA+E,GAAGC,IAAI,CAACP,GAAL,CAASW,GAAG,IAAI,CAACN,GAAG,CAACO,KAAJ,CAAUC,OAAV,CAAkBE,WAAnB,EAAgC,CAACJ,GAAD,EAAML,SAAN,CAAhC,CAAhB,CAAlF,CAAf,EAAsKU,IAAtK,CAA2KhB,GAAG,CAACiB,GAAG,IAAIV,IAAI,CAACP,GAAL,CAAS,CAACW,GAAD,EAAMO,KAAN,MAAiB;AACtRC,IAAAA,OAAO,EAAEF,GAAG,CAACC,KAAD,CAD0Q;AAEtRP,IAAAA,GAFsR;AAGtRS,IAAAA,QAAQ,EAAEH,GAAG,CAACV,IAAI,CAACE,MAAL,GAAcS,KAAf;AAHyQ,GAAjB,CAAT,CAAR,CAA9K,CAAd,GAIlDnB,EAAE,CAAC,EAAD,CAJC,CAAX;AAKD;AACD,OAAO,SAASsB,WAAT,CAAqBjB,UAArB,EAAiCC,GAAjC,EAAsC;AAC3C,SAAOH,IAAI,CAACE,UAAD,EAAa,CAACE,SAAD,EAAYK,GAAZ,KAAoBN,GAAG,CAACiB,MAAJ,CAAWT,OAAX,CAAmBV,aAAnB,CAAiCG,SAAjC,EAA4C,CAACK,GAAD,CAA5C,EAAmD,IAAnD,EAAyDK,IAAzD,CAA8DhB,GAAG,CAAC,CAAC,CAACuB,KAAD,CAAD,KAAaA,KAAd,CAAjE,CAAjC,CAAX;AACD;AACD,OAAO,SAASC,YAAT,CAAsBpB,UAAtB,EAAkCC,GAAlC,EAAuC;AAC5C,SAAOH,IAAI,CAACE,UAAD,EAAa,CAACE,SAAD,EAAYmB,UAAU,GAAG,KAAzB,KAAmC;AACzD,WAAOpB,GAAG,CAACiB,MAAJ,CAAWT,OAAX,CAAmBa,YAAnB,CAAgCD,UAAhC,EAA4CT,IAA5C,CAAiDf,SAAS,CAACM,IAAI,IAAIF,GAAG,CAACiB,MAAJ,CAAWT,OAAX,CAAmBV,aAAnB,CAAiCG,SAAjC,EAA4CC,IAA5C,EAAkDkB,UAAlD,CAAT,CAA1D,CAAP;AACD,GAFU,CAAX;AAGD","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { of } from '@polkadot/x-rxjs';\nimport { map, switchMap } from '@polkadot/x-rxjs/operators';\nimport { memo } from \"../util/index.js\";\nexport function _ownExposures(instanceId, api) {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  return memo(instanceId, (accountId, eras, _withActive) => eras.length ? api.queryMulti([...eras.map(era => [api.query.staking.erasStakersClipped, [era, accountId]]), ...eras.map(era => [api.query.staking.erasStakers, [era, accountId]])]).pipe(map(all => eras.map((era, index) => ({\n    clipped: all[index],\n    era,\n    exposure: all[eras.length + index]\n  })))) : of([]));\n}\nexport function ownExposure(instanceId, api) {\n  return memo(instanceId, (accountId, era) => api.derive.staking._ownExposures(accountId, [era], true).pipe(map(([first]) => first)));\n}\nexport function ownExposures(instanceId, api) {\n  return memo(instanceId, (accountId, withActive = false) => {\n    return api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._ownExposures(accountId, eras, withActive)));\n  });\n}"]},"metadata":{},"sourceType":"module"}