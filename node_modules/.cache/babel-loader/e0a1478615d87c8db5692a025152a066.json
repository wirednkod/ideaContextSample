{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from 'react';\nimport { ApiPromise } from '@polkadot/api';\nconst ALICE = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY';\nexport const getTodos = async () => {\n  console.log('123');\n  const api = await ApiPromise.create();\n  const [{\n    nonce: accountNonce\n  }, now, validators] = await Promise.all([api.query.system.account(ALICE), api.query.timestamp.now() // api.query.session.validators()\n  ]);\n  console.log(`accountNonce(${ALICE}) ${accountNonce}`);\n  console.log(`last block timestamp ${now.toNumber()}`); // console.log(`validators: ${validators}`);\n};\nexport const useGetTodos = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [data, setData] = useState(0);\n\n  const execute = async () => {\n    try {\n      setIsLoading(true);\n      const todos = await getTodos();\n      setData(todos);\n      return todos;\n    } catch (e) {\n      setError(e);\n      setIsLoading(false);\n      throw e;\n    }\n  };\n\n  return {\n    isLoading,\n    error,\n    data,\n    execute: useCallback(execute, []) // to avoid infinite calls when inside a `useEffect`\n\n  };\n};\n\n_s(useGetTodos, \"+hJCLURRaFwB5Yc35wJDCGJXr5Q=\");","map":{"version":3,"sources":["/home/wirednkod/Documents/repos/mine/sampleContext/src/useTodo.js"],"names":["useState","useCallback","ApiPromise","ALICE","getTodos","console","log","api","create","nonce","accountNonce","now","validators","Promise","all","query","system","account","timestamp","toNumber","useGetTodos","isLoading","setIsLoading","error","setError","data","setData","execute","todos","e"],"mappings":";;AAAA,SACIA,QADJ,EAEIC,WAFJ,QAGS,OAHT;AAIA,SAASC,UAAT,QAA2B,eAA3B;AAEA,MAAMC,KAAK,GAAG,kDAAd;AAEA,OAAO,MAAMC,QAAQ,GAAG,YAAY;AAClCC,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACA,QAAMC,GAAG,GAAG,MAAML,UAAU,CAACM,MAAX,EAAlB;AACA,QAAM,CAAC;AAAEC,IAAAA,KAAK,EAAEC;AAAT,GAAD,EAA0BC,GAA1B,EAA+BC,UAA/B,IAA6C,MAAMC,OAAO,CAACC,GAAR,CAAY,CACnEP,GAAG,CAACQ,KAAJ,CAAUC,MAAV,CAAiBC,OAAjB,CAAyBd,KAAzB,CADmE,EAEnEI,GAAG,CAACQ,KAAJ,CAAUG,SAAV,CAAoBP,GAApB,EAFmE,CAGnE;AAHmE,GAAZ,CAAzD;AAKAN,EAAAA,OAAO,CAACC,GAAR,CAAa,gBAAeH,KAAM,KAAIO,YAAa,EAAnD;AACAL,EAAAA,OAAO,CAACC,GAAR,CAAa,wBAAuBK,GAAG,CAACQ,QAAJ,EAAe,EAAnD,EATkC,CAUlC;AACD,CAXM;AAaP,OAAO,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAC/B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BtB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACuB,KAAD,EAAQC,QAAR,IAAoBxB,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACyB,IAAD,EAAOC,OAAP,IAAkB1B,QAAQ,CAAC,CAAD,CAAhC;;AAEA,QAAM2B,OAAO,GAAG,YAAY;AAC1B,QAAI;AACFL,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,YAAMM,KAAK,GAAG,MAAMxB,QAAQ,EAA5B;AACAsB,MAAAA,OAAO,CAACE,KAAD,CAAP;AACA,aAAOA,KAAP;AACD,KALD,CAKE,OAAOC,CAAP,EAAU;AACVL,MAAAA,QAAQ,CAACK,CAAD,CAAR;AACAP,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,YAAMO,CAAN;AACD;AACF,GAXD;;AAaA,SAAO;AACLR,IAAAA,SADK;AAELE,IAAAA,KAFK;AAGLE,IAAAA,IAHK;AAILE,IAAAA,OAAO,EAAE1B,WAAW,CAAC0B,OAAD,EAAU,EAAV,CAJf,CAI8B;;AAJ9B,GAAP;AAMD,CAxBM;;GAAMP,W","sourcesContent":["import {\n    useState,\n    useCallback,\n  } from 'react';\nimport { ApiPromise } from '@polkadot/api';\n\nconst ALICE = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY';\n\nexport const getTodos = async () => {\n  console.log('123');\n  const api = await ApiPromise.create();\n  const [{ nonce: accountNonce }, now, validators] = await Promise.all([\n    api.query.system.account(ALICE),\n    api.query.timestamp.now()\n    // api.query.session.validators()\n  ]);\n  console.log(`accountNonce(${ALICE}) ${accountNonce}`);\n  console.log(`last block timestamp ${now.toNumber()}`);\n  // console.log(`validators: ${validators}`);\n};\n\nexport const useGetTodos = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [data, setData] = useState(0);\n  \n  const execute = async () => {\n    try {\n      setIsLoading(true);\n      const todos = await getTodos();\n      setData(todos);\n      return todos;\n    } catch (e) {\n      setError(e);\n      setIsLoading(false);\n      throw e;\n    }\n  };\n  \n  return {\n    isLoading,\n    error,\n    data,\n    execute: useCallback(execute, []), // to avoid infinite calls when inside a `useEffect`\n  };\n};"]},"metadata":{},"sourceType":"module"}