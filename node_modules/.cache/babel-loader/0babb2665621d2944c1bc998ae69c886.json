{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { combineLatest } from '@polkadot/x-rxjs';\nimport { map } from '@polkadot/x-rxjs/operators';\nimport { memo } from \"../util/index.js\"; // Voter is current tuple is 2.x-era\n\nfunction isVoter(value) {\n  return !Array.isArray(value);\n}\n\nfunction retrieveStakeOf(api) {\n  return (api.query.phragmenElection || api.query.electionsPhragmen || api.query.elections).stakeOf.entries().pipe(map(entries => entries.map(([{\n    args: [accountId]\n  }, stake]) => [accountId, stake])));\n}\n\nfunction retrieveVoteOf(api) {\n  return (api.query.phragmenElection || api.query.electionsPhragmen || api.query.elections).votesOf.entries().pipe(map(entries => entries.map(([{\n    args: [accountId]\n  }, votes]) => [accountId, votes])));\n}\n\nfunction retrievePrev(api) {\n  return combineLatest([retrieveStakeOf(api), retrieveVoteOf(api)]).pipe(map(([stakes, votes]) => {\n    const result = [];\n    votes.forEach(([voter, votes]) => {\n      result.push([voter, {\n        stake: api.registry.createType('Balance'),\n        votes\n      }]);\n    });\n    stakes.forEach(([staker, stake]) => {\n      const entry = result.find(([voter]) => voter.eq(staker));\n\n      if (entry) {\n        entry[1].stake = stake;\n      } else {\n        result.push([staker, {\n          stake,\n          votes: []\n        }]);\n      }\n    });\n    return result;\n  }));\n}\n\nfunction retrieveCurrent(api) {\n  const elections = api.query.phragmenElection || api.query.electionsPhragmen || api.query.elections;\n  return elections.voting.entries().pipe(map(entries => entries.map(([{\n    args: [accountId]\n  }, value]) => [accountId, isVoter(value) ? {\n    stake: value.stake,\n    votes: value.votes\n  } : {\n    stake: value[0],\n    votes: value[1]\n  }])));\n}\n\nexport function votes(instanceId, api) {\n  return memo(instanceId, () => (api.query.phragmenElection || api.query.electionsPhragmen || api.query.elections).stakeOf ? retrievePrev(api) : retrieveCurrent(api));\n}","map":{"version":3,"sources":["/home/wirednkod/Documents/repos/mine/sampleContext/node_modules/@polkadot/api-derive/council/votes.js"],"names":["combineLatest","map","memo","isVoter","value","Array","isArray","retrieveStakeOf","api","query","phragmenElection","electionsPhragmen","elections","stakeOf","entries","pipe","args","accountId","stake","retrieveVoteOf","votesOf","votes","retrievePrev","stakes","result","forEach","voter","push","registry","createType","staker","entry","find","eq","retrieveCurrent","voting","instanceId"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { combineLatest } from '@polkadot/x-rxjs';\nimport { map } from '@polkadot/x-rxjs/operators';\nimport { memo } from \"../util/index.js\"; // Voter is current tuple is 2.x-era\n\nfunction isVoter(value) {\n  return !Array.isArray(value);\n}\n\nfunction retrieveStakeOf(api) {\n  return (api.query.phragmenElection || api.query.electionsPhragmen || api.query.elections).stakeOf.entries().pipe(map(entries => entries.map(([{\n    args: [accountId]\n  }, stake]) => [accountId, stake])));\n}\n\nfunction retrieveVoteOf(api) {\n  return (api.query.phragmenElection || api.query.electionsPhragmen || api.query.elections).votesOf.entries().pipe(map(entries => entries.map(([{\n    args: [accountId]\n  }, votes]) => [accountId, votes])));\n}\n\nfunction retrievePrev(api) {\n  return combineLatest([retrieveStakeOf(api), retrieveVoteOf(api)]).pipe(map(([stakes, votes]) => {\n    const result = [];\n    votes.forEach(([voter, votes]) => {\n      result.push([voter, {\n        stake: api.registry.createType('Balance'),\n        votes\n      }]);\n    });\n    stakes.forEach(([staker, stake]) => {\n      const entry = result.find(([voter]) => voter.eq(staker));\n\n      if (entry) {\n        entry[1].stake = stake;\n      } else {\n        result.push([staker, {\n          stake,\n          votes: []\n        }]);\n      }\n    });\n    return result;\n  }));\n}\n\nfunction retrieveCurrent(api) {\n  const elections = api.query.phragmenElection || api.query.electionsPhragmen || api.query.elections;\n  return elections.voting.entries().pipe(map(entries => entries.map(([{\n    args: [accountId]\n  }, value]) => [accountId, isVoter(value) ? {\n    stake: value.stake,\n    votes: value.votes\n  } : {\n    stake: value[0],\n    votes: value[1]\n  }])));\n}\n\nexport function votes(instanceId, api) {\n  return memo(instanceId, () => (api.query.phragmenElection || api.query.electionsPhragmen || api.query.elections).stakeOf ? retrievePrev(api) : retrieveCurrent(api));\n}"]},"metadata":{},"sourceType":"module"}