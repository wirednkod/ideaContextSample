{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nimport { BN_BILLION, BN_ZERO } from '@polkadot/util';\nimport { combineLatest, of } from '@polkadot/x-rxjs';\nimport { map, switchMap } from '@polkadot/x-rxjs/operators';\nimport { memo } from \"../util/index.js\";\n\nfunction parseRewards(api, stashId, [erasPoints, erasPrefs, erasRewards], exposures) {\n  return exposures.map(({\n    era,\n    isEmpty,\n    isValidator,\n    nominating,\n    validators: eraValidators\n  }) => {\n    const {\n      eraPoints,\n      validators: allValPoints\n    } = erasPoints.find(p => p.era.eq(era)) || {\n      eraPoints: BN_ZERO,\n      validators: {}\n    };\n    const {\n      eraReward\n    } = erasRewards.find(r => r.era.eq(era)) || {\n      eraReward: api.registry.createType('Balance')\n    };\n    const {\n      validators: allValPrefs\n    } = erasPrefs.find(p => p.era.eq(era)) || {\n      validators: {}\n    };\n    const validators = {};\n    const stakerId = stashId.toString();\n    Object.entries(eraValidators).forEach(([validatorId, exposure]) => {\n      var _allValPrefs$validato, _exposure$total;\n\n      const valPoints = allValPoints[validatorId] || BN_ZERO;\n      const valComm = ((_allValPrefs$validato = allValPrefs[validatorId]) === null || _allValPrefs$validato === void 0 ? void 0 : _allValPrefs$validato.commission.unwrap()) || BN_ZERO;\n      const expTotal = ((_exposure$total = exposure.total) === null || _exposure$total === void 0 ? void 0 : _exposure$total.unwrap()) || BN_ZERO;\n      let avail = BN_ZERO;\n      let value;\n\n      if (!(expTotal.isZero() || valPoints.isZero() || eraPoints.isZero())) {\n        avail = eraReward.mul(valPoints).div(eraPoints);\n        const valCut = valComm.mul(avail).div(BN_BILLION);\n        let staked;\n\n        if (validatorId === stakerId) {\n          staked = exposure.own.unwrap();\n        } else {\n          const stakerExp = exposure.others.find(({\n            who\n          }) => who.eq(stakerId));\n          staked = stakerExp ? stakerExp.value.unwrap() : BN_ZERO;\n        }\n\n        value = avail.sub(valCut).imul(staked).div(expTotal).iadd(validatorId === stakerId ? valCut : BN_ZERO);\n      }\n\n      validators[validatorId] = {\n        total: api.registry.createType('Balance', avail),\n        value: api.registry.createType('Balance', value)\n      };\n    });\n    return {\n      era,\n      eraReward,\n      isEmpty,\n      isValidator,\n      nominating,\n      validators\n    };\n  });\n}\n\nfunction allUniqValidators(rewards) {\n  return rewards.reduce(([all, perStash], rewards) => {\n    const uniq = [];\n    perStash.push(uniq);\n    rewards.forEach(({\n      validators\n    }) => Object.keys(validators).forEach(validatorId => {\n      if (!uniq.includes(validatorId)) {\n        uniq.push(validatorId);\n\n        if (!all.includes(validatorId)) {\n          all.push(validatorId);\n        }\n      }\n    }));\n    return [all, perStash];\n  }, [[], []]);\n}\n\nfunction removeClaimed(validators, queryValidators, reward) {\n  const rm = [];\n  Object.keys(reward.validators).forEach(validatorId => {\n    const index = validators.indexOf(validatorId);\n\n    if (index !== -1) {\n      const valLedger = queryValidators[index].stakingLedger;\n\n      if (valLedger !== null && valLedger !== void 0 && valLedger.claimedRewards.some(era => reward.era.eq(era))) {\n        rm.push(validatorId);\n      }\n    }\n  });\n  rm.forEach(validatorId => {\n    delete reward.validators[validatorId];\n  });\n}\n\nfunction filterRewards(eras, valInfo, {\n  rewards,\n  stakingLedger\n}) {\n  const filter = eras.filter(era => !stakingLedger.claimedRewards.some(e => e.eq(era)));\n  const validators = valInfo.map(([v]) => v);\n  const queryValidators = valInfo.map(([, q]) => q);\n  return rewards.filter(({\n    isEmpty\n  }) => !isEmpty).filter(reward => {\n    if (!filter.some(filter => reward.era.eq(filter))) {\n      return false;\n    }\n\n    reward.isStakerPayout = true;\n    removeClaimed(validators, queryValidators, reward);\n    return true;\n  }).filter(({\n    validators\n  }) => Object.keys(validators).length !== 0).map(reward => _objectSpread(_objectSpread({}, reward), {}, {\n    nominators: reward.nominating.filter(n => reward.validators[n.validatorId])\n  }));\n}\n\nexport function _stakerRewardsEras(instanceId, api) {\n  return memo(instanceId, (eras, withActive) => combineLatest([api.derive.staking._erasPoints(eras, withActive), api.derive.staking._erasPrefs(eras, withActive), api.derive.staking._erasRewards(eras, withActive)]));\n}\nexport function _stakerRewards(instanceId, api) {\n  return memo(instanceId, (accountIds, eras, withActive) => combineLatest([api.derive.staking.queryMulti(accountIds, {\n    withLedger: true\n  }), api.derive.staking._stakerExposures(accountIds, eras, withActive), api.derive.staking._stakerRewardsEras(eras, withActive)]).pipe(switchMap(([queries, exposures, erasResult]) => {\n    const allRewards = queries.map(({\n      stakingLedger,\n      stashId\n    }, index) => !stashId || !stakingLedger ? [] : parseRewards(api, stashId, erasResult, exposures[index]));\n\n    if (withActive) {\n      return of(allRewards);\n    }\n\n    const [allValidators, stashValidators] = allUniqValidators(allRewards);\n    return api.derive.staking.queryMulti(allValidators, {\n      withLedger: true\n    }).pipe(map(queriedVals => {\n      return queries.map(({\n        stakingLedger\n      }, index) => {\n        const rewards = allRewards[index];\n        const ownValidators = stashValidators[index].map(validatorId => [validatorId, queriedVals.find(q => q.accountId.eq(validatorId))]);\n        return filterRewards(eras, ownValidators, {\n          rewards,\n          stakingLedger\n        });\n      });\n    }));\n  })));\n}\nexport function stakerRewards(instanceId, api) {\n  return memo(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._stakerRewards([accountId], eras, withActive)), map(([first]) => first)));\n}\nexport function stakerRewardsMultiEras(instanceId, api) {\n  return memo(instanceId, (accountIds, eras) => accountIds.length && eras.length ? api.derive.staking._stakerRewards(accountIds, eras, false) : of([]));\n}\nexport function stakerRewardsMulti(instanceId, api) {\n  return memo(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking.stakerRewardsMultiEras(accountIds, eras))));\n}","map":{"version":3,"sources":["/home/wirednkod/Documents/repos/mine/sampleContext/node_modules/@polkadot/api-derive/staking/stakerRewards.js"],"names":["_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","BN_BILLION","BN_ZERO","combineLatest","of","map","switchMap","memo","parseRewards","api","stashId","erasPoints","erasPrefs","erasRewards","exposures","era","isEmpty","isValidator","nominating","validators","eraValidators","eraPoints","allValPoints","find","p","eq","eraReward","r","registry","createType","allValPrefs","stakerId","toString","entries","validatorId","exposure","_allValPrefs$validato","_exposure$total","valPoints","valComm","commission","unwrap","expTotal","total","avail","value","isZero","mul","div","valCut","staked","own","stakerExp","others","who","sub","imul","iadd","allUniqValidators","rewards","reduce","all","perStash","uniq","includes","removeClaimed","queryValidators","reward","rm","index","indexOf","valLedger","stakingLedger","claimedRewards","some","filterRewards","eras","valInfo","e","v","q","isStakerPayout","nominators","n","_stakerRewardsEras","instanceId","withActive","derive","staking","_erasPoints","_erasPrefs","_erasRewards","_stakerRewards","accountIds","queryMulti","withLedger","_stakerExposures","pipe","queries","erasResult","allRewards","allValidators","stashValidators","queriedVals","ownValidators","accountId","stakerRewards","erasHistoric","first","stakerRewardsMultiEras","stakerRewardsMulti"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { BN_BILLION, BN_ZERO } from '@polkadot/util';\nimport { combineLatest, of } from '@polkadot/x-rxjs';\nimport { map, switchMap } from '@polkadot/x-rxjs/operators';\nimport { memo } from \"../util/index.js\";\n\nfunction parseRewards(api, stashId, [erasPoints, erasPrefs, erasRewards], exposures) {\n  return exposures.map(({\n    era,\n    isEmpty,\n    isValidator,\n    nominating,\n    validators: eraValidators\n  }) => {\n    const {\n      eraPoints,\n      validators: allValPoints\n    } = erasPoints.find(p => p.era.eq(era)) || {\n      eraPoints: BN_ZERO,\n      validators: {}\n    };\n    const {\n      eraReward\n    } = erasRewards.find(r => r.era.eq(era)) || {\n      eraReward: api.registry.createType('Balance')\n    };\n    const {\n      validators: allValPrefs\n    } = erasPrefs.find(p => p.era.eq(era)) || {\n      validators: {}\n    };\n    const validators = {};\n    const stakerId = stashId.toString();\n    Object.entries(eraValidators).forEach(([validatorId, exposure]) => {\n      var _allValPrefs$validato, _exposure$total;\n\n      const valPoints = allValPoints[validatorId] || BN_ZERO;\n      const valComm = ((_allValPrefs$validato = allValPrefs[validatorId]) === null || _allValPrefs$validato === void 0 ? void 0 : _allValPrefs$validato.commission.unwrap()) || BN_ZERO;\n      const expTotal = ((_exposure$total = exposure.total) === null || _exposure$total === void 0 ? void 0 : _exposure$total.unwrap()) || BN_ZERO;\n      let avail = BN_ZERO;\n      let value;\n\n      if (!(expTotal.isZero() || valPoints.isZero() || eraPoints.isZero())) {\n        avail = eraReward.mul(valPoints).div(eraPoints);\n        const valCut = valComm.mul(avail).div(BN_BILLION);\n        let staked;\n\n        if (validatorId === stakerId) {\n          staked = exposure.own.unwrap();\n        } else {\n          const stakerExp = exposure.others.find(({\n            who\n          }) => who.eq(stakerId));\n          staked = stakerExp ? stakerExp.value.unwrap() : BN_ZERO;\n        }\n\n        value = avail.sub(valCut).imul(staked).div(expTotal).iadd(validatorId === stakerId ? valCut : BN_ZERO);\n      }\n\n      validators[validatorId] = {\n        total: api.registry.createType('Balance', avail),\n        value: api.registry.createType('Balance', value)\n      };\n    });\n    return {\n      era,\n      eraReward,\n      isEmpty,\n      isValidator,\n      nominating,\n      validators\n    };\n  });\n}\n\nfunction allUniqValidators(rewards) {\n  return rewards.reduce(([all, perStash], rewards) => {\n    const uniq = [];\n    perStash.push(uniq);\n    rewards.forEach(({\n      validators\n    }) => Object.keys(validators).forEach(validatorId => {\n      if (!uniq.includes(validatorId)) {\n        uniq.push(validatorId);\n\n        if (!all.includes(validatorId)) {\n          all.push(validatorId);\n        }\n      }\n    }));\n    return [all, perStash];\n  }, [[], []]);\n}\n\nfunction removeClaimed(validators, queryValidators, reward) {\n  const rm = [];\n  Object.keys(reward.validators).forEach(validatorId => {\n    const index = validators.indexOf(validatorId);\n\n    if (index !== -1) {\n      const valLedger = queryValidators[index].stakingLedger;\n\n      if (valLedger !== null && valLedger !== void 0 && valLedger.claimedRewards.some(era => reward.era.eq(era))) {\n        rm.push(validatorId);\n      }\n    }\n  });\n  rm.forEach(validatorId => {\n    delete reward.validators[validatorId];\n  });\n}\n\nfunction filterRewards(eras, valInfo, {\n  rewards,\n  stakingLedger\n}) {\n  const filter = eras.filter(era => !stakingLedger.claimedRewards.some(e => e.eq(era)));\n  const validators = valInfo.map(([v]) => v);\n  const queryValidators = valInfo.map(([, q]) => q);\n  return rewards.filter(({\n    isEmpty\n  }) => !isEmpty).filter(reward => {\n    if (!filter.some(filter => reward.era.eq(filter))) {\n      return false;\n    }\n\n    reward.isStakerPayout = true;\n    removeClaimed(validators, queryValidators, reward);\n    return true;\n  }).filter(({\n    validators\n  }) => Object.keys(validators).length !== 0).map(reward => _objectSpread(_objectSpread({}, reward), {}, {\n    nominators: reward.nominating.filter(n => reward.validators[n.validatorId])\n  }));\n}\n\nexport function _stakerRewardsEras(instanceId, api) {\n  return memo(instanceId, (eras, withActive) => combineLatest([api.derive.staking._erasPoints(eras, withActive), api.derive.staking._erasPrefs(eras, withActive), api.derive.staking._erasRewards(eras, withActive)]));\n}\nexport function _stakerRewards(instanceId, api) {\n  return memo(instanceId, (accountIds, eras, withActive) => combineLatest([api.derive.staking.queryMulti(accountIds, {\n    withLedger: true\n  }), api.derive.staking._stakerExposures(accountIds, eras, withActive), api.derive.staking._stakerRewardsEras(eras, withActive)]).pipe(switchMap(([queries, exposures, erasResult]) => {\n    const allRewards = queries.map(({\n      stakingLedger,\n      stashId\n    }, index) => !stashId || !stakingLedger ? [] : parseRewards(api, stashId, erasResult, exposures[index]));\n\n    if (withActive) {\n      return of(allRewards);\n    }\n\n    const [allValidators, stashValidators] = allUniqValidators(allRewards);\n    return api.derive.staking.queryMulti(allValidators, {\n      withLedger: true\n    }).pipe(map(queriedVals => {\n      return queries.map(({\n        stakingLedger\n      }, index) => {\n        const rewards = allRewards[index];\n        const ownValidators = stashValidators[index].map(validatorId => [validatorId, queriedVals.find(q => q.accountId.eq(validatorId))]);\n        return filterRewards(eras, ownValidators, {\n          rewards,\n          stakingLedger\n        });\n      });\n    }));\n  })));\n}\nexport function stakerRewards(instanceId, api) {\n  return memo(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._stakerRewards([accountId], eras, withActive)), map(([first]) => first)));\n}\nexport function stakerRewardsMultiEras(instanceId, api) {\n  return memo(instanceId, (accountIds, eras) => accountIds.length && eras.length ? api.derive.staking._stakerRewards(accountIds, eras, false) : of([]));\n}\nexport function stakerRewardsMulti(instanceId, api) {\n  return memo(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking.stakerRewardsMultiEras(accountIds, eras))));\n}"]},"metadata":{},"sourceType":"module"}