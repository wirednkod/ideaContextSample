{"ast":null,"code":"// Copyright 2017-2021 @polkadot/metadata authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { flattenUniq } from \"./flattenUniq.js\";\nimport { validateTypes } from \"./validateTypes.js\";\n/** @internal */\n\nfunction unwrapCalls(mod) {\n  return mod.calls ? mod.calls.unwrapOr([]) : [];\n}\n/** @internal */\n\n\nfunction typeToString({\n  type\n}) {\n  return type.toString();\n}\n/** @internal */\n\n\nfunction getCallNames({\n  modules\n}) {\n  return modules.map(mod => unwrapCalls(mod).map(({\n    args\n  }) => args.map(typeToString)));\n}\n/** @internal */\n\n\nfunction getConstantNames({\n  modules\n}) {\n  return modules.map(({\n    constants\n  }) => (constants || []).map(typeToString));\n}\n/** @internal */\n\n\nfunction unwrapEvents(events) {\n  return events ? events.unwrapOr([]) : [];\n}\n/** @internal */\n\n\nfunction getEventNames({\n  modules\n}) {\n  return modules.map(({\n    events\n  }) => unwrapEvents(events).map(({\n    args\n  }) => args.map(a => a.toString())));\n}\n/** @internal */\n\n\nfunction unwrapStorage(storage) {\n  return storage ? storage.unwrapOr({\n    items: []\n  }).items : [];\n}\n/** @internal */\n\n\nfunction getStorageNames({\n  modules\n}) {\n  return modules.map(({\n    storage\n  }) => unwrapStorage(storage).map(({\n    type\n  }) => type.isPlain ? [type.asPlain.toString()] : type.isMap ? [type.asMap.value.toString(), type.asMap.key.toString()] : type.isDoubleMap ? [type.asDoubleMap.value.toString(), type.asDoubleMap.key1.toString(), type.asDoubleMap.key2.toString()] : [type.asNMap.value.toString(), ...type.asNMap.keyVec.map(k => k.toString())]));\n}\n/** @internal */\n\n\nexport function getUniqTypes(registry, meta, throwError) {\n  return validateTypes(registry, throwError, flattenUniq([getCallNames(meta), getConstantNames(meta), getEventNames(meta), getStorageNames(meta)]));\n}","map":{"version":3,"sources":["/home/wirednkod/Documents/repos/mine/sampleContext/node_modules/@polkadot/metadata/util/getUniqTypes.js"],"names":["flattenUniq","validateTypes","unwrapCalls","mod","calls","unwrapOr","typeToString","type","toString","getCallNames","modules","map","args","getConstantNames","constants","unwrapEvents","events","getEventNames","a","unwrapStorage","storage","items","getStorageNames","isPlain","asPlain","isMap","asMap","value","key","isDoubleMap","asDoubleMap","key1","key2","asNMap","keyVec","k","getUniqTypes","registry","meta","throwError"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/metadata authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { flattenUniq } from \"./flattenUniq.js\";\nimport { validateTypes } from \"./validateTypes.js\";\n\n/** @internal */\nfunction unwrapCalls(mod) {\n  return mod.calls ? mod.calls.unwrapOr([]) : [];\n}\n/** @internal */\n\n\nfunction typeToString({\n  type\n}) {\n  return type.toString();\n}\n/** @internal */\n\n\nfunction getCallNames({\n  modules\n}) {\n  return modules.map(mod => unwrapCalls(mod).map(({\n    args\n  }) => args.map(typeToString)));\n}\n/** @internal */\n\n\nfunction getConstantNames({\n  modules\n}) {\n  return modules.map(({\n    constants\n  }) => (constants || []).map(typeToString));\n}\n/** @internal */\n\n\nfunction unwrapEvents(events) {\n  return events ? events.unwrapOr([]) : [];\n}\n/** @internal */\n\n\nfunction getEventNames({\n  modules\n}) {\n  return modules.map(({\n    events\n  }) => unwrapEvents(events).map(({\n    args\n  }) => args.map(a => a.toString())));\n}\n/** @internal */\n\n\nfunction unwrapStorage(storage) {\n  return storage ? storage.unwrapOr({\n    items: []\n  }).items : [];\n}\n/** @internal */\n\n\nfunction getStorageNames({\n  modules\n}) {\n  return modules.map(({\n    storage\n  }) => unwrapStorage(storage).map(({\n    type\n  }) => type.isPlain ? [type.asPlain.toString()] : type.isMap ? [type.asMap.value.toString(), type.asMap.key.toString()] : type.isDoubleMap ? [type.asDoubleMap.value.toString(), type.asDoubleMap.key1.toString(), type.asDoubleMap.key2.toString()] : [type.asNMap.value.toString(), ...type.asNMap.keyVec.map(k => k.toString())]));\n}\n/** @internal */\n\n\nexport function getUniqTypes(registry, meta, throwError) {\n  return validateTypes(registry, throwError, flattenUniq([getCallNames(meta), getConstantNames(meta), getEventNames(meta), getStorageNames(meta)]));\n}"]},"metadata":{},"sourceType":"module"}