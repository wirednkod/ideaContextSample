{"ast":null,"code":"// Copyright 2019-2021 @polkadot/wasm-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport \"./detectPackage.js\";\nimport { asmJsInit } from '@polkadot/wasm-crypto-asmjs';\nimport { wasmBytes } from '@polkadot/wasm-crypto-wasm';\nimport { allocString, allocU8a, getWasm, initWasm, resultString, resultU8a, withWasm } from \"./bridge.js\";\nimport * as imports from \"./imports.js\";\nexport { packageInfo } from \"./packageInfo.js\";\nconst wasmPromise = initWasm(wasmBytes, asmJsInit, imports).catch(() => null);\nexport const bip39Generate = withWasm(wasm => words => {\n  wasm.ext_bip39_generate(8, words);\n  return resultString();\n});\nexport const bip39ToEntropy = withWasm(wasm => phrase => {\n  const [ptr0, len0] = allocString(phrase);\n  wasm.ext_bip39_to_entropy(8, ptr0, len0);\n  return resultU8a();\n});\nexport const bip39ToMiniSecret = withWasm(wasm => (phrase, password) => {\n  const [ptr0, len0] = allocString(phrase);\n  const [ptr1, len1] = allocString(password);\n  wasm.ext_bip39_to_mini_secret(8, ptr0, len0, ptr1, len1);\n  return resultU8a();\n});\nexport const bip39ToSeed = withWasm(wasm => (phrase, password) => {\n  const [ptr0, len0] = allocString(phrase);\n  const [ptr1, len1] = allocString(password);\n  wasm.ext_bip39_to_seed(8, ptr0, len0, ptr1, len1);\n  return resultU8a();\n});\nexport const bip39Validate = withWasm(wasm => phrase => {\n  const [ptr0, len0] = allocString(phrase);\n  const ret = wasm.ext_bip39_validate(ptr0, len0);\n  return ret !== 0;\n});\nexport const ed25519KeypairFromSeed = withWasm(wasm => seed => {\n  const [ptr0, len0] = allocU8a(seed);\n  wasm.ext_ed_from_seed(8, ptr0, len0);\n  return resultU8a();\n});\nexport const ed25519Sign = withWasm(wasm => (pubkey, seckey, message) => {\n  const [ptr0, len0] = allocU8a(pubkey);\n  const [ptr1, len1] = allocU8a(seckey);\n  const [ptr2, len2] = allocU8a(message);\n  wasm.ext_ed_sign(8, ptr0, len0, ptr1, len1, ptr2, len2);\n  return resultU8a();\n});\nexport const ed25519Verify = withWasm(wasm => (signature, message, pubkey) => {\n  const [ptr0, len0] = allocU8a(signature);\n  const [ptr1, len1] = allocU8a(message);\n  const [ptr2, len2] = allocU8a(pubkey);\n  const ret = wasm.ext_ed_verify(ptr0, len0, ptr1, len1, ptr2, len2);\n  return ret !== 0;\n});\nexport const sr25519DeriveKeypairHard = withWasm(wasm => (pair, cc) => {\n  const [ptr0, len0] = allocU8a(pair);\n  const [ptr1, len1] = allocU8a(cc);\n  wasm.ext_sr_derive_keypair_hard(8, ptr0, len0, ptr1, len1);\n  return resultU8a();\n});\nexport const sr25519DeriveKeypairSoft = withWasm(wasm => (pair, cc) => {\n  const [ptr0, len0] = allocU8a(pair);\n  const [ptr1, len1] = allocU8a(cc);\n  wasm.ext_sr_derive_keypair_soft(8, ptr0, len0, ptr1, len1);\n  return resultU8a();\n});\nexport const sr25519DerivePublicSoft = withWasm(wasm => (pubkey, cc) => {\n  const [ptr0, len0] = allocU8a(pubkey);\n  const [ptr1, len1] = allocU8a(cc);\n  wasm.ext_sr_derive_public_soft(8, ptr0, len0, ptr1, len1);\n  return resultU8a();\n});\nexport const sr25519KeypairFromSeed = withWasm(wasm => seed => {\n  const [ptr0, len0] = allocU8a(seed);\n  wasm.ext_sr_from_seed(8, ptr0, len0);\n  return resultU8a();\n});\nexport const sr25519Sign = withWasm(wasm => (pubkey, secret, message) => {\n  const [ptr0, len0] = allocU8a(pubkey);\n  const [ptr1, len1] = allocU8a(secret);\n  const [ptr2, len2] = allocU8a(message);\n  wasm.ext_sr_sign(8, ptr0, len0, ptr1, len1, ptr2, len2);\n  return resultU8a();\n});\nexport const sr25519Verify = withWasm(wasm => (signature, message, pubkey) => {\n  const [ptr0, len0] = allocU8a(signature);\n  const [ptr1, len1] = allocU8a(message);\n  const [ptr2, len2] = allocU8a(pubkey);\n  const ret = wasm.ext_sr_verify(ptr0, len0, ptr1, len1, ptr2, len2);\n  return ret !== 0;\n});\nexport const vrfSign = withWasm(wasm => (secret, context, message, extra) => {\n  const [ptr0, len0] = allocU8a(secret);\n  const [ptr1, len1] = allocU8a(context);\n  const [ptr2, len2] = allocU8a(message);\n  const [ptr3, len3] = allocU8a(extra);\n  wasm.ext_vrf_sign(8, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n  return resultU8a();\n});\nexport const vrfVerify = withWasm(wasm => (pubkey, context, message, extra, outAndProof) => {\n  const [ptr0, len0] = allocU8a(pubkey);\n  const [ptr1, len1] = allocU8a(context);\n  const [ptr2, len2] = allocU8a(message);\n  const [ptr3, len3] = allocU8a(extra);\n  const [ptr4, len4] = allocU8a(outAndProof);\n  const ret = wasm.ext_vrf_verify(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, ptr4, len4);\n  return ret !== 0;\n});\nexport const blake2b = withWasm(wasm => (data, key, size) => {\n  const [ptr0, len0] = allocU8a(data);\n  const [ptr1, len1] = allocU8a(key);\n  wasm.ext_blake2b(8, ptr0, len0, ptr1, len1, size);\n  return resultU8a();\n});\nexport const keccak256 = withWasm(wasm => data => {\n  const [ptr0, len0] = allocU8a(data);\n  wasm.ext_keccak256(8, ptr0, len0);\n  return resultU8a();\n});\nexport const pbkdf2 = withWasm(wasm => (data, salt, rounds) => {\n  const [ptr0, len0] = allocU8a(data);\n  const [ptr1, len1] = allocU8a(salt);\n  wasm.ext_pbkdf2(8, ptr0, len0, ptr1, len1, rounds);\n  return resultU8a();\n});\nexport const scrypt = withWasm(wasm => (password, salt, log2n, r, p) => {\n  const [ptr0, len0] = allocU8a(password);\n  const [ptr1, len1] = allocU8a(salt);\n  wasm.ext_scrypt(8, ptr0, len0, ptr1, len1, log2n, r, p);\n  return resultU8a();\n});\nexport const sha512 = withWasm(wasm => data => {\n  const [ptr0, len0] = allocU8a(data);\n  wasm.ext_sha512(8, ptr0, len0);\n  return resultU8a();\n});\nexport const twox = withWasm(wasm => (data, rounds) => {\n  const [ptr0, len0] = allocU8a(data);\n  wasm.ext_twox(8, ptr0, len0, rounds);\n  return resultU8a();\n});\nexport function isReady() {\n  return !!getWasm();\n}\nexport function waitReady() {\n  return wasmPromise.then(() => isReady());\n}","map":{"version":3,"sources":["/home/wirednkod/Documents/repos/mine/sampleContext/node_modules/@polkadot/wasm-crypto/index.js"],"names":["asmJsInit","wasmBytes","allocString","allocU8a","getWasm","initWasm","resultString","resultU8a","withWasm","imports","packageInfo","wasmPromise","catch","bip39Generate","wasm","words","ext_bip39_generate","bip39ToEntropy","phrase","ptr0","len0","ext_bip39_to_entropy","bip39ToMiniSecret","password","ptr1","len1","ext_bip39_to_mini_secret","bip39ToSeed","ext_bip39_to_seed","bip39Validate","ret","ext_bip39_validate","ed25519KeypairFromSeed","seed","ext_ed_from_seed","ed25519Sign","pubkey","seckey","message","ptr2","len2","ext_ed_sign","ed25519Verify","signature","ext_ed_verify","sr25519DeriveKeypairHard","pair","cc","ext_sr_derive_keypair_hard","sr25519DeriveKeypairSoft","ext_sr_derive_keypair_soft","sr25519DerivePublicSoft","ext_sr_derive_public_soft","sr25519KeypairFromSeed","ext_sr_from_seed","sr25519Sign","secret","ext_sr_sign","sr25519Verify","ext_sr_verify","vrfSign","context","extra","ptr3","len3","ext_vrf_sign","vrfVerify","outAndProof","ptr4","len4","ext_vrf_verify","blake2b","data","key","size","ext_blake2b","keccak256","ext_keccak256","pbkdf2","salt","rounds","ext_pbkdf2","scrypt","log2n","r","p","ext_scrypt","sha512","ext_sha512","twox","ext_twox","isReady","waitReady","then"],"mappings":"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","sourcesContent":["// Copyright 2019-2021 @polkadot/wasm-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport \"./detectPackage.js\";\nimport { asmJsInit } from '@polkadot/wasm-crypto-asmjs';\nimport { wasmBytes } from '@polkadot/wasm-crypto-wasm';\nimport { allocString, allocU8a, getWasm, initWasm, resultString, resultU8a, withWasm } from \"./bridge.js\";\nimport * as imports from \"./imports.js\";\nexport { packageInfo } from \"./packageInfo.js\";\nconst wasmPromise = initWasm(wasmBytes, asmJsInit, imports).catch(() => null);\nexport const bip39Generate = withWasm(wasm => words => {\n  wasm.ext_bip39_generate(8, words);\n  return resultString();\n});\nexport const bip39ToEntropy = withWasm(wasm => phrase => {\n  const [ptr0, len0] = allocString(phrase);\n  wasm.ext_bip39_to_entropy(8, ptr0, len0);\n  return resultU8a();\n});\nexport const bip39ToMiniSecret = withWasm(wasm => (phrase, password) => {\n  const [ptr0, len0] = allocString(phrase);\n  const [ptr1, len1] = allocString(password);\n  wasm.ext_bip39_to_mini_secret(8, ptr0, len0, ptr1, len1);\n  return resultU8a();\n});\nexport const bip39ToSeed = withWasm(wasm => (phrase, password) => {\n  const [ptr0, len0] = allocString(phrase);\n  const [ptr1, len1] = allocString(password);\n  wasm.ext_bip39_to_seed(8, ptr0, len0, ptr1, len1);\n  return resultU8a();\n});\nexport const bip39Validate = withWasm(wasm => phrase => {\n  const [ptr0, len0] = allocString(phrase);\n  const ret = wasm.ext_bip39_validate(ptr0, len0);\n  return ret !== 0;\n});\nexport const ed25519KeypairFromSeed = withWasm(wasm => seed => {\n  const [ptr0, len0] = allocU8a(seed);\n  wasm.ext_ed_from_seed(8, ptr0, len0);\n  return resultU8a();\n});\nexport const ed25519Sign = withWasm(wasm => (pubkey, seckey, message) => {\n  const [ptr0, len0] = allocU8a(pubkey);\n  const [ptr1, len1] = allocU8a(seckey);\n  const [ptr2, len2] = allocU8a(message);\n  wasm.ext_ed_sign(8, ptr0, len0, ptr1, len1, ptr2, len2);\n  return resultU8a();\n});\nexport const ed25519Verify = withWasm(wasm => (signature, message, pubkey) => {\n  const [ptr0, len0] = allocU8a(signature);\n  const [ptr1, len1] = allocU8a(message);\n  const [ptr2, len2] = allocU8a(pubkey);\n  const ret = wasm.ext_ed_verify(ptr0, len0, ptr1, len1, ptr2, len2);\n  return ret !== 0;\n});\nexport const sr25519DeriveKeypairHard = withWasm(wasm => (pair, cc) => {\n  const [ptr0, len0] = allocU8a(pair);\n  const [ptr1, len1] = allocU8a(cc);\n  wasm.ext_sr_derive_keypair_hard(8, ptr0, len0, ptr1, len1);\n  return resultU8a();\n});\nexport const sr25519DeriveKeypairSoft = withWasm(wasm => (pair, cc) => {\n  const [ptr0, len0] = allocU8a(pair);\n  const [ptr1, len1] = allocU8a(cc);\n  wasm.ext_sr_derive_keypair_soft(8, ptr0, len0, ptr1, len1);\n  return resultU8a();\n});\nexport const sr25519DerivePublicSoft = withWasm(wasm => (pubkey, cc) => {\n  const [ptr0, len0] = allocU8a(pubkey);\n  const [ptr1, len1] = allocU8a(cc);\n  wasm.ext_sr_derive_public_soft(8, ptr0, len0, ptr1, len1);\n  return resultU8a();\n});\nexport const sr25519KeypairFromSeed = withWasm(wasm => seed => {\n  const [ptr0, len0] = allocU8a(seed);\n  wasm.ext_sr_from_seed(8, ptr0, len0);\n  return resultU8a();\n});\nexport const sr25519Sign = withWasm(wasm => (pubkey, secret, message) => {\n  const [ptr0, len0] = allocU8a(pubkey);\n  const [ptr1, len1] = allocU8a(secret);\n  const [ptr2, len2] = allocU8a(message);\n  wasm.ext_sr_sign(8, ptr0, len0, ptr1, len1, ptr2, len2);\n  return resultU8a();\n});\nexport const sr25519Verify = withWasm(wasm => (signature, message, pubkey) => {\n  const [ptr0, len0] = allocU8a(signature);\n  const [ptr1, len1] = allocU8a(message);\n  const [ptr2, len2] = allocU8a(pubkey);\n  const ret = wasm.ext_sr_verify(ptr0, len0, ptr1, len1, ptr2, len2);\n  return ret !== 0;\n});\nexport const vrfSign = withWasm(wasm => (secret, context, message, extra) => {\n  const [ptr0, len0] = allocU8a(secret);\n  const [ptr1, len1] = allocU8a(context);\n  const [ptr2, len2] = allocU8a(message);\n  const [ptr3, len3] = allocU8a(extra);\n  wasm.ext_vrf_sign(8, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n  return resultU8a();\n});\nexport const vrfVerify = withWasm(wasm => (pubkey, context, message, extra, outAndProof) => {\n  const [ptr0, len0] = allocU8a(pubkey);\n  const [ptr1, len1] = allocU8a(context);\n  const [ptr2, len2] = allocU8a(message);\n  const [ptr3, len3] = allocU8a(extra);\n  const [ptr4, len4] = allocU8a(outAndProof);\n  const ret = wasm.ext_vrf_verify(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, ptr4, len4);\n  return ret !== 0;\n});\nexport const blake2b = withWasm(wasm => (data, key, size) => {\n  const [ptr0, len0] = allocU8a(data);\n  const [ptr1, len1] = allocU8a(key);\n  wasm.ext_blake2b(8, ptr0, len0, ptr1, len1, size);\n  return resultU8a();\n});\nexport const keccak256 = withWasm(wasm => data => {\n  const [ptr0, len0] = allocU8a(data);\n  wasm.ext_keccak256(8, ptr0, len0);\n  return resultU8a();\n});\nexport const pbkdf2 = withWasm(wasm => (data, salt, rounds) => {\n  const [ptr0, len0] = allocU8a(data);\n  const [ptr1, len1] = allocU8a(salt);\n  wasm.ext_pbkdf2(8, ptr0, len0, ptr1, len1, rounds);\n  return resultU8a();\n});\nexport const scrypt = withWasm(wasm => (password, salt, log2n, r, p) => {\n  const [ptr0, len0] = allocU8a(password);\n  const [ptr1, len1] = allocU8a(salt);\n  wasm.ext_scrypt(8, ptr0, len0, ptr1, len1, log2n, r, p);\n  return resultU8a();\n});\nexport const sha512 = withWasm(wasm => data => {\n  const [ptr0, len0] = allocU8a(data);\n  wasm.ext_sha512(8, ptr0, len0);\n  return resultU8a();\n});\nexport const twox = withWasm(wasm => (data, rounds) => {\n  const [ptr0, len0] = allocU8a(data);\n  wasm.ext_twox(8, ptr0, len0, rounds);\n  return resultU8a();\n});\nexport function isReady() {\n  return !!getWasm();\n}\nexport function waitReady() {\n  return wasmPromise.then(() => isReady());\n}"]},"metadata":{},"sourceType":"module"}