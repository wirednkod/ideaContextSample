{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map } from '@polkadot/x-rxjs/operators';\nimport { memo } from \"../util/index.js\"; // SeatHolder is current tuple is 2.x-era Substrate\n\nfunction isSeatHolder(value) {\n  return !Array.isArray(value);\n}\n\nfunction isCandidateTuple(value) {\n  return Array.isArray(value);\n}\n\nfunction getAccountTuple(value) {\n  return isSeatHolder(value) ? [value.who, value.stake] : value;\n}\n\nfunction getCandidate(value) {\n  return isCandidateTuple(value) ? value[0] : value;\n}\n\nfunction sortAccounts([, balanceA], [, balanceB]) {\n  return balanceB.cmp(balanceA);\n}\n\nfunction queryElections(api) {\n  const section = api.query.phragmenElection ? 'phragmenElection' : api.query.electionsPhragmen ? 'electionsPhragmen' : 'elections';\n  return api.queryMulti([api.query.council.members, api.query[section].candidates, api.query[section].members, api.query[section].runnersUp]).pipe(map(([councilMembers, candidates, members, runnersUp]) => ({\n    candidacyBond: api.consts[section].candidacyBond,\n    candidateCount: api.registry.createType('u32', candidates.length),\n    candidates: candidates.map(getCandidate),\n    desiredRunnersUp: api.consts[section].desiredRunnersUp,\n    desiredSeats: api.consts[section].desiredMembers,\n    members: members.length ? members.map(getAccountTuple).sort(sortAccounts) : councilMembers.map(accountId => [accountId, api.registry.createType('Balance')]),\n    runnersUp: runnersUp.map(getAccountTuple).sort(sortAccounts),\n    termDuration: api.consts[section].termDuration,\n    votingBond: api.consts[section].votingBond\n  })));\n}\n/**\n * @name info\n * @returns An object containing the combined results of the storage queries for\n * all relevant election module properties.\n * @example\n * <BR>\n *\n * ```javascript\n * api.derive.elections.info(({ members, candidates }) => {\n *   console.log(`There are currently ${members.length} council members and ${candidates.length} prospective council candidates.`);\n * });\n * ```\n */\n\n\nexport function info(instanceId, api) {\n  return memo(instanceId, () => queryElections(api));\n}","map":{"version":3,"sources":["/home/wirednkod/Documents/repos/mine/sampleContext/node_modules/@polkadot/api-derive/elections/info.js"],"names":["map","memo","isSeatHolder","value","Array","isArray","isCandidateTuple","getAccountTuple","who","stake","getCandidate","sortAccounts","balanceA","balanceB","cmp","queryElections","api","section","query","phragmenElection","electionsPhragmen","queryMulti","council","members","candidates","runnersUp","pipe","councilMembers","candidacyBond","consts","candidateCount","registry","createType","length","desiredRunnersUp","desiredSeats","desiredMembers","sort","accountId","termDuration","votingBond","info","instanceId"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map } from '@polkadot/x-rxjs/operators';\nimport { memo } from \"../util/index.js\"; // SeatHolder is current tuple is 2.x-era Substrate\n\nfunction isSeatHolder(value) {\n  return !Array.isArray(value);\n}\n\nfunction isCandidateTuple(value) {\n  return Array.isArray(value);\n}\n\nfunction getAccountTuple(value) {\n  return isSeatHolder(value) ? [value.who, value.stake] : value;\n}\n\nfunction getCandidate(value) {\n  return isCandidateTuple(value) ? value[0] : value;\n}\n\nfunction sortAccounts([, balanceA], [, balanceB]) {\n  return balanceB.cmp(balanceA);\n}\n\nfunction queryElections(api) {\n  const section = api.query.phragmenElection ? 'phragmenElection' : api.query.electionsPhragmen ? 'electionsPhragmen' : 'elections';\n  return api.queryMulti([api.query.council.members, api.query[section].candidates, api.query[section].members, api.query[section].runnersUp]).pipe(map(([councilMembers, candidates, members, runnersUp]) => ({\n    candidacyBond: api.consts[section].candidacyBond,\n    candidateCount: api.registry.createType('u32', candidates.length),\n    candidates: candidates.map(getCandidate),\n    desiredRunnersUp: api.consts[section].desiredRunnersUp,\n    desiredSeats: api.consts[section].desiredMembers,\n    members: members.length ? members.map(getAccountTuple).sort(sortAccounts) : councilMembers.map(accountId => [accountId, api.registry.createType('Balance')]),\n    runnersUp: runnersUp.map(getAccountTuple).sort(sortAccounts),\n    termDuration: api.consts[section].termDuration,\n    votingBond: api.consts[section].votingBond\n  })));\n}\n/**\n * @name info\n * @returns An object containing the combined results of the storage queries for\n * all relevant election module properties.\n * @example\n * <BR>\n *\n * ```javascript\n * api.derive.elections.info(({ members, candidates }) => {\n *   console.log(`There are currently ${members.length} council members and ${candidates.length} prospective council candidates.`);\n * });\n * ```\n */\n\n\nexport function info(instanceId, api) {\n  return memo(instanceId, () => queryElections(api));\n}"]},"metadata":{},"sourceType":"module"}